TileSize		equ		$1008        ; 16 x 16 pixel
TileWidth		equ     16
TileHeight      equ     16
LevelWidth		equ		640
ScreenWidth		equ     320
ScreenHeight	equ		240
MemTileSize   	equ     $0080        ; 128 bytes tile size
TilesPerRow		equ     40           ; 640/16=40
MarioOffset     equ     32
FontSize   		equ		$0804        ; 8 x 8 pixel
FontWidth		equ     8
FontHeight		equ     8
SpriteSize		equ		$1008        ; 16 x 16 pixel
TimerCounterStart equ	24           ; 24 FPS/ time tick => 2,5 ticks/s
StartTime       equ		400          ; Level/Life Start Time

main:
	pal  Palette
	ldi  R0, TileSet
	addi R0, 3   ; Offset past header (X,Y sizes)
	ldi  R1, 0   ; CurrentXScroll
	ldi  R2, 0   ; CurrentYScroll 
	ldi  RA, 1
	ldi  RB, 120 ; StartX for Mario
	ldi  RC, 192 ; StartY for Mario
	ldi  RD, 1   ; Mario Movement State 0=LEFT, 1=STILL 2=RIGHT
	ldi  RE, 1   ; Mario Current Animation Direction (2=Forward/0=Back/3=Jumping)
	ldi  RF, 0   ; Mario Current Animation Picture
;DrawLoop:
;	call DrawTiles
;	call DrawOSD
;	call DrawMario
;	jmp	 DrawLoop
InitGame:
	ldi  R3, 3
	stm  R3, Lives
	ldi  R3, TimerCounterStart
	stm  R3, TimerCounter
InitNewLife:
	ldi  R3, StartTime
	stm  R3, Time
InitTileDraw:
	spr  TileSize
	push R8
	cls
	ldi  R3, StartTiles
	mov  R6, R1 ; CurrentX
	mov  R7, R2 ; CurrentY ; R7 Borrowed as Temp Reg for MarioAniCounter
	ldi  R8, LevelWidth
	add  R8, R1 ; Offset End Xcoord after scroll
	ldi  R9, ScreenHeight
	add  R9, R2
TileDrawLoop:
	ldm  R4, R3
	andi R4, 0xFF
	muli R4, MemTileSize 
	add  R4, R0 ; R4 = Start of current tile address
	drw  R6, R7, R4
	addi R3, 1
	addi R6, TileWidth
	cmp  R6, R8
	jnz  TileDrawLoop
	;cmpi R6, 320
	;jle  TileDrawLoop   
	;addi R3, 19 ; add an extra screen to start at the correct offset
	
	mov  R6, R1
	addi R7, TileHeight
	cmp  R7, R9
	jnz  TileDrawLoop
	pop  R8
	pushall
UpdateOSDChars:
	; update 24 counter, check for 0
	ldm  R0, TimerCounter
	subi R0, 1
	stm  R0, TimerCounter
	cmpi R0, 0xFFFF
	jnz  TimerCounterNotFin
	ldi  R0, TimerCounterStart
	stm  R0, TimerCounter
	; if <0 timer counter, update timer and then BCD location
	ldm  R1, Time
	cmpi R1, 0
	jz   ZeroTimeLeft
	subi R1, 1
	stm  R1, Time
ZeroTimeLeft:
	call UpdateTimerBcd
	cmpi R1, 0
	jnz  TimerNotFin
	;call KillMario
	;jmp  InitNewLife
TimerNotFin:
	;stm  R1, Time
TimerCounterNotFin:

OSDInit:
	spr  FontSize    	; set sprite size to 8x8
	ldi  R0, StartOSD
	ldi  R1, ScreenWidth
	ldi  R2, MarioFont
	addi R2, 3 			; skip 3 byte header
	ldi  R3, 0
	ldi  R4, 0

OSDDrawLoop:
	ldm  R5, R0
	andi R5, 0xFF
	cmpi R5, 0x20 ; space?
	jnz  NoSpace
	addi R5, 0x20
NoSpace:
	subi R5, 0x30
	shl  R5, 5
	add  R5, R2
	drw  R3, R4, R5
	addi R0, 1
	addi R3, FontWidth
	cmpi R3, 320
	jnz  OSDDrawLoop
	ldi  R3, 0
	addi R4, 8
	cmpi R4, 16
	jnz  OSDDrawLoop
	popall
InitSpriteDraw:
	spr  SpriteSize ; set sprite size to 16x16
Mario:
	cmpi R8, 2
	jz   NoFlip
	flip 1, 0
NoFlip:
	ldi  RA, MarioOffset
	call AnimateMario
	add  RA, RF
	muli RA, MemTileSize
	add  RA, R0
	drw  RB,RC,RA ;check for collision here
	flip 0, 0
CheckKeysMario:
	call CalcMarioWorldPos ; calc and save current MarioWorldPos
	ldm  R5, 0xFFF0
	tsti R5, 0x0004 ; left pressed
	cnz  TryMoveLeft
	tsti R5, 0x0008 ; right pressed
	cnz  TryMoveRight
	tsti R5, 0x0001 ; Up/button pressed
	cnz  TryMoveUp
	tsti R5, 0x0002 ; Down button pressed
	cnz  TryMoveDown
	tsti R5, 0x000C ; stopped
	cz   MarioStopped
	jmp  EndOfFrame
TryMoveUp:
	; find the current tiles above of Mario
	ldm  R7, MarioWorldX
	;subi R7, 1 ; try to not stick
	shr  R7, 4
	addi R7, StartTiles
	ldm  R9, MarioWorldY
	shr  R9, 4
	muli R9, TilesPerRow
	add  R7, R9
	ldm  R9, R7 ; current 2 tiles in R9
	; are any of these collision tiles? => Don't move!
	andi R9, 0xFF
	tsti R9, 0x10
	jnz   NoMoveUp
	ldm  R9, R7
	shr  R9, 8
	tsti R9, 0x10
	jz  MoveUp
NoMoveUp:
	ret
MoveUp:
	subi  RC, 1
	ret
TryMoveDown:
	; find the current tiles below of Mario
	ldm  R7, MarioWorldX
	shr  R7, 4
	addi R7, StartTiles
	ldm  R9, MarioWorldY
	addi R9, 16
	shr  R9, 4
	muli R9, TilesPerRow
	add  R7, R9
	ldm  R9, R7 ; current 2 tiles in R9
	; are any of these collision tiles? => Don't move!
	andi R9, 0xFF
	tsti R9, 0x10
	jnz   NoMoveDown
	ldm  R9, R7
	shr  R9, 8
	tsti R9, 0x10
	jz  MoveDown
NoMoveDown:
	ret
MoveDown:
	addi  RC, 1
	ret
TryMoveLeft: ; <=
	; find the current tiles left of Mario
	ldm  R7, MarioWorldX
	subi R7, 1
	shr  R7, 4
	addi R7, StartTiles
	ldm  R9, MarioWorldY
	subi R9, 1
	shr  R9, 4
	muli R9, TilesPerRow
	add  R7, R9
	ldm  R9, R7
	andi R9, 0xFF
	tsti R9, 0x10
	jnz  NoMoveLeft  
	addi R7, TilesPerRow
	ldm  R9, R7
	andi R9, 0xFF
	tsti R9, 0x10
	jz   MoveLeft
NoMoveLeft:
	ret
MoveLeft:
	cmpi  RB, 80
	jz    MarioScrollLeft
	subi RB, 1
	jmp  MarioLeft
MarioScrollLeft:
	call ScrollLeft
MarioLeft:
	ldi  RD, 0
	mov  R8, RD
	ret
TryMoveRight: ; =>
 	; find the current tiles right of Mario
	ldm  R7, MarioWorldX
	addi R7, 1 ; to not stick
	shr  R7, 4
	addi R7, StartTiles
	ldm  R9, MarioWorldY
	subi R9, 1
	shr  R9, 4
	muli R9, TilesPerRow
	add  R7, R9
	ldm  R9, R7
	shr  R9, 8
	andi R9, 0xFF
	tsti  R9, 0x10
	jnz 	 NoMoveRight  
	addi R7, TilesPerRow
	ldm  R9, R7
	shr  R9, 8
	andi R9, 0xFF
	tsti R9, 0x10
	jz  MoveRight
NoMoveRight:
	ret
MoveRight:
	cmpi RB, 150 ;scroll-right movement
	jz   MarioScrollRight
	addi RB, 1
	jmp MarioRight
MarioScrollRight:
	call ScrollRight
MarioRight:	
	ldi  RD, 2
	mov  R8, RD
	ret
MarioStopped:
	ldi RD, 1
	ret
AnimateMario:
	cmpi RD, 1
	jz   NoMovement
	ldm  R7, MarioAniCounter
	addi R7, 1
	cmpi R7, 4 ; MarioAniSpeed
	jnz  EndAni
	ldi  R7, 0
	add  RF, RE
	cmpi RF, 2
	jz   SwitchToDec
	cmpi RF, 0
	jnz  EndAni
	ldi  RE, 1
	jmp  EndAni
SwitchToDec:
	ldi RE, -1
EndAni:
	stm  R7, MarioAniCounter
	ret
NoMovement:
	ldi  RF, 0
	ldi  RE, 1
	ret
CheckKeys:
	ldm  R5, 0xFFF0
	tsti R5, 0x0001 ; up pressed
	cnz  ScrollUp
	tsti R5, 0x0002 ; down pressed
	cnz  ScrollDown
	tsti R5, 0x0004 ; left pressed
	cnz  ScrollRight
	tsti R5, 0x0008 ; right pressed
	cnz  ScrollLeft
	jmp  EndOfFrame
ScrollUp:
	subi R2, 1
	ret
ScrollDown:
	addi R2, 1
	ret
ScrollRight:
	subi R1, 1
	ret
ScrollLeft:
	addi R1, 1
	ret
EndOfFrame:
	vblnk
	jmp InitTileDraw

CalcMarioWorldPos:
	mov R7, RB
	sub R7, R1
	stm R7, MarioWorldX 
	mov R7, RC
	sub R7, R2
	stm R7, MarioWorldY
	ret
	
UpdateTimerBcd:
	pushall
	ldi  R7, 0
	ldi  R8, 0
	ldi  R9, 0
	ldi  RA, 0
	ldm  R2, Time
	andi R2, 0xF
	muli R2, 4
	call BcdLoop ; BCD0 table
	ldm  R2, Time
	shr  R2, 4
	andi R2, 0xF
	muli R2, 4
	addi R2, 64 ; BCD1 table
	call BcdLoop
	ldm  R2, Time
	shr  R2, 8
	andi R2, 0xF
	muli R2, 4
	addi R2, 128 ; BCD2 table
	call BcdLoop
WriteBackBCD:	
	ldi  R0, StartOSD
	addi R0, 76 ;offset for start of timer (3 digit)
	mov  R1, R8
	addi R1, 0x30
	call WriteByte
	addi R0, 1
	mov  R1, R9
	addi R1, 0x30
	call WriteByte
	addi R0, 1
	mov  R1, RA
	addi R1, 0x30
	call WriteByte
	popall
	ret

BcdLoop:
	addi R2, BCDTable
	ldm  R3, R2 ; read BCD3
	andi R3, 0xFF
	add  R7, R3
	addi R2, 1
	ldm  R4, R2 ; read BCD2
	andi R4, 0xFF
	add  R8, R4
	addi R2, 1
	ldm  R5, R2 ; read BCD1
	andi R5, 0xFF
	add  R9, R5
	addi R2, 1
	ldm  R6, R2 ; read BCD0
	andi R6, 0xFF
	add  RA, R6
	call FixBcdOverflow
	ret
	
FixBcdOverflow:
	cmpi RA, 9
	jle  NoBcd1Of
	subi RA, 10
	addi R9, 1
NoBcd1Of:
	cmpi R9, 9
	jle  NoBCD2Of
	subi R9, 10
	addi R8, 1
NoBCD2Of:
	ret
	
DrawTiles:
	ret

DrawOSD:
	ret

DrawMario:
	ret

KillMario:
	ret

include ..\Libraries\ByteAccessLib.asm
	
EndOfProgram:
db 	0x00
	
MarioAniCounter:
db  0x00, 0x00
MarioWorldX:
db  0x00, 0x00
MarioWorldY:
db  0x00, 0x00
Time:
db  0x00, 0x00
TimerCounter: ; 24-0 to get 2.5 FPS on timer
db 0x00, 0x00
Lives:
db  0x00, 0x00
CurrentWorld:
db  0x00, 0x00

importbin Graphics\Mario16CRW.bmp.bin 0 5251 TileSet
importbin Graphics\MarioFontLong.bmp.bin 0 1539 MarioFont
importbin Graphics\Mario16CRW.bmp.PAL 0 48 Palette
StartTiles:
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x06,0x06,0x08,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x04,0x06,0x08,0x00,0x00,0x00,0x00,0x04,0x08,0x00,0x00,0x05,0x07,0x07,0x09,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x05,0x07,0x09,0x00,0x00,0x00,0x00,0x05,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x15,0x15,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,0x17,0x00
db	0x00,0x00,0x15,0x15,0x15,0x12,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13, 0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x19,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x13, 0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,0x17,0x00,0x00,0x00,0x00,0x18,0x19,0x00
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x13,0x13, 0x13,0x00,0x00,0x16,0x17,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x19,0x00,0x00,0x00,0x00,0x18,0x19,0x00
db	0x00,0x00,0x01,0x03,0x00,0x00,0x01,0x02,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x13,0x13,0x13, 0x13,0x00,0x00,0x18,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x19,0x00,0x00,0x00,0x00,0x18,0x19,0x00
db	0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14, 0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,
db	0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14, 0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,
EndTiles:

StartOSD:
;db 0x10,0x1C,0x10,0x21,0x18,0x1E,0x10,0x10,0x10,0x1B,0x18,0x25,0x14,0x22,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x26,0x1E,0x21,0x1B,0x13,0x10,0x10,0x10,0x10,0x23,0x18,0x1C,0x14,0x10,
;db 0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x00,0x03,0x10,0x10,0x10,0x10,0x10,0x00,0x0C,0x02,0x10,0x10,0x10,0x10,0x10,0x10,0x01,0x0D,0x01,0x10,0x10,0x10,0x10,0x10,0x10,0x0F,0x0F,0x0F,0x10,
db " MARIO   LIVES            WORLD    TIME "
db " 000000    03              0<2          "
EndOSD:

BCDTable: ; handles only numbers between 0-1023
; BCD0 - 0-15
db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x03,
db  0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x07,
db  0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x09,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x01,
db  0x00,0x00,0x01,0x02,0x00,0x00,0x01,0x03,0x00,0x00,0x01,0x04,0x00,0x00,0x01,0x05,
; BCD1 - 16,32,48...
db	0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x00,0x00,0x03,0x02,0x00,0x00,0x04,0x08,
db  0x00,0x00,0x06,0x04,0x00,0x00,0x08,0x00,0x00,0x00,0x09,0x06,0x00,0x01,0x01,0x02,
db  0x00,0x01,0x02,0x08,0x00,0x01,0x04,0x04,0x00,0x01,0x06,0x00,0x00,0x01,0x07,0x06,
db  0x00,0x01,0x09,0x02,0x00,0x02,0x00,0x08,0x00,0x02,0x02,0x04,0x00,0x02,0x04,0x00
; BCD2 - 256,32,48...
db	0x00,0x00,0x00,0x00,0x00,0x02,0x05,0x06,0x00,0x05,0x01,0x02,0x00,0x07,0x06,0x08,
; db  0x01,0x00,0x02,0x04
; ,0x00,0x00,0x09,0x06,0x00,0x01,0x01,0x02,0x00,0x01,0x02,0x08,
; db  0x00,0x01,0x04,0x04,0x00,0x01,0x06,0x00,0x00,0x01,0x07,0x06,0x00,0x01,0x09,0x02,
; db  0x00,0x02,0x00,0x08,0x00,0x02,0x02,0x04,0x00,0x02,0x04,0x00,0x00,0x02,0x05,0x06,